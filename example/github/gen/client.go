// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package gen

import (
	"context"

	"github.com/Yamashou/gqlgenc/client"
)

type Client struct {
	Client *client.Client
}
type LanguageFragment struct {
	ID   string
	Name string
}
type GetUser struct {
	Viewer struct {
		ID           string
		Name         *string
		Repositories struct {
			Nodes []*struct {
				ID        string
				Name      string
				Languages *struct{ Nodes []*LanguageFragment }
			}
		}
	}
}

const GetUserQuery = `query GetUser ($repositoryFirst: Int!, $languageFirst: Int!) {
	viewer {
		id
		name
		repositories(first: $repositoryFirst, orderBy: {field:CREATED_AT,direction:DESC}) {
			nodes {
				id
				name
				languages(first: $languageFirst) {
					nodes {
						... LanguageFragment
					}
				}
			}
		}
	}
}
fragment LanguageFragment on Language {
	id
	name
}
`

func (c *Client) GetUser(ctx context.Context, repositoryFirst int, languageFirst int, httpRequestOptions ...client.HTTPRequestOption) (*GetUser, error) {
	vars := map[string]interface{}{
		"repositoryFirst": repositoryFirst,
		"languageFirst":   languageFirst,
	}

	var res GetUser
	if err := c.Client.Post(ctx, GetUserQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}
